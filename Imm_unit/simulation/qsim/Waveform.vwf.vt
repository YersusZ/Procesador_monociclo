// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/21/2024 18:04:13"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Imm_unit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Imm_unit_vlg_sample_tst(
	ImmIn,
	ImmSrc,
	sampler_tx
);
input [24:0] ImmIn;
input [2:0] ImmSrc;
output sampler_tx;

reg sample;
time current_time;
always @(ImmIn or ImmSrc)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Imm_unit_vlg_check_tst (
	ImmExt,
	sampler_rx
);
input [31:0] ImmExt;
input sampler_rx;

reg [31:0] ImmExt_expected;

reg [31:0] ImmExt_prev;

reg [31:0] ImmExt_expected_prev;

reg [31:0] last_ImmExt_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	ImmExt_prev = ImmExt;
end

// update expected /o prevs

always @(trigger)
begin
	ImmExt_expected_prev = ImmExt_expected;
end


// expected ImmExt[ 31 ]
initial
begin
	ImmExt_expected[31] = 1'bX;
end 
// expected ImmExt[ 30 ]
initial
begin
	ImmExt_expected[30] = 1'bX;
end 
// expected ImmExt[ 29 ]
initial
begin
	ImmExt_expected[29] = 1'bX;
end 
// expected ImmExt[ 28 ]
initial
begin
	ImmExt_expected[28] = 1'bX;
end 
// expected ImmExt[ 27 ]
initial
begin
	ImmExt_expected[27] = 1'bX;
end 
// expected ImmExt[ 26 ]
initial
begin
	ImmExt_expected[26] = 1'bX;
end 
// expected ImmExt[ 25 ]
initial
begin
	ImmExt_expected[25] = 1'bX;
end 
// expected ImmExt[ 24 ]
initial
begin
	ImmExt_expected[24] = 1'bX;
end 
// expected ImmExt[ 23 ]
initial
begin
	ImmExt_expected[23] = 1'bX;
end 
// expected ImmExt[ 22 ]
initial
begin
	ImmExt_expected[22] = 1'bX;
end 
// expected ImmExt[ 21 ]
initial
begin
	ImmExt_expected[21] = 1'bX;
end 
// expected ImmExt[ 20 ]
initial
begin
	ImmExt_expected[20] = 1'bX;
end 
// expected ImmExt[ 19 ]
initial
begin
	ImmExt_expected[19] = 1'bX;
end 
// expected ImmExt[ 18 ]
initial
begin
	ImmExt_expected[18] = 1'bX;
end 
// expected ImmExt[ 17 ]
initial
begin
	ImmExt_expected[17] = 1'bX;
end 
// expected ImmExt[ 16 ]
initial
begin
	ImmExt_expected[16] = 1'bX;
end 
// expected ImmExt[ 15 ]
initial
begin
	ImmExt_expected[15] = 1'bX;
end 
// expected ImmExt[ 14 ]
initial
begin
	ImmExt_expected[14] = 1'bX;
end 
// expected ImmExt[ 13 ]
initial
begin
	ImmExt_expected[13] = 1'bX;
end 
// expected ImmExt[ 12 ]
initial
begin
	ImmExt_expected[12] = 1'bX;
end 
// expected ImmExt[ 11 ]
initial
begin
	ImmExt_expected[11] = 1'bX;
end 
// expected ImmExt[ 10 ]
initial
begin
	ImmExt_expected[10] = 1'bX;
end 
// expected ImmExt[ 9 ]
initial
begin
	ImmExt_expected[9] = 1'bX;
end 
// expected ImmExt[ 8 ]
initial
begin
	ImmExt_expected[8] = 1'bX;
end 
// expected ImmExt[ 7 ]
initial
begin
	ImmExt_expected[7] = 1'bX;
end 
// expected ImmExt[ 6 ]
initial
begin
	ImmExt_expected[6] = 1'bX;
end 
// expected ImmExt[ 5 ]
initial
begin
	ImmExt_expected[5] = 1'bX;
end 
// expected ImmExt[ 4 ]
initial
begin
	ImmExt_expected[4] = 1'bX;
end 
// expected ImmExt[ 3 ]
initial
begin
	ImmExt_expected[3] = 1'bX;
end 
// expected ImmExt[ 2 ]
initial
begin
	ImmExt_expected[2] = 1'bX;
end 
// expected ImmExt[ 1 ]
initial
begin
	ImmExt_expected[1] = 1'bX;
end 
// expected ImmExt[ 0 ]
initial
begin
	ImmExt_expected[0] = 1'bX;
end 
// generate trigger
always @(ImmExt_expected or ImmExt)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ImmExt = %b | ",ImmExt_expected_prev);
	$display("| real ImmExt = %b | ",ImmExt_prev);
`endif
	if (
		( ImmExt_expected_prev[0] !== 1'bx ) && ( ImmExt_prev[0] !== ImmExt_expected_prev[0] )
		&& ((ImmExt_expected_prev[0] !== last_ImmExt_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[0] = ImmExt_expected_prev[0];
	end
	if (
		( ImmExt_expected_prev[1] !== 1'bx ) && ( ImmExt_prev[1] !== ImmExt_expected_prev[1] )
		&& ((ImmExt_expected_prev[1] !== last_ImmExt_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[1] = ImmExt_expected_prev[1];
	end
	if (
		( ImmExt_expected_prev[2] !== 1'bx ) && ( ImmExt_prev[2] !== ImmExt_expected_prev[2] )
		&& ((ImmExt_expected_prev[2] !== last_ImmExt_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[2] = ImmExt_expected_prev[2];
	end
	if (
		( ImmExt_expected_prev[3] !== 1'bx ) && ( ImmExt_prev[3] !== ImmExt_expected_prev[3] )
		&& ((ImmExt_expected_prev[3] !== last_ImmExt_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[3] = ImmExt_expected_prev[3];
	end
	if (
		( ImmExt_expected_prev[4] !== 1'bx ) && ( ImmExt_prev[4] !== ImmExt_expected_prev[4] )
		&& ((ImmExt_expected_prev[4] !== last_ImmExt_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[4] = ImmExt_expected_prev[4];
	end
	if (
		( ImmExt_expected_prev[5] !== 1'bx ) && ( ImmExt_prev[5] !== ImmExt_expected_prev[5] )
		&& ((ImmExt_expected_prev[5] !== last_ImmExt_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[5] = ImmExt_expected_prev[5];
	end
	if (
		( ImmExt_expected_prev[6] !== 1'bx ) && ( ImmExt_prev[6] !== ImmExt_expected_prev[6] )
		&& ((ImmExt_expected_prev[6] !== last_ImmExt_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[6] = ImmExt_expected_prev[6];
	end
	if (
		( ImmExt_expected_prev[7] !== 1'bx ) && ( ImmExt_prev[7] !== ImmExt_expected_prev[7] )
		&& ((ImmExt_expected_prev[7] !== last_ImmExt_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[7] = ImmExt_expected_prev[7];
	end
	if (
		( ImmExt_expected_prev[8] !== 1'bx ) && ( ImmExt_prev[8] !== ImmExt_expected_prev[8] )
		&& ((ImmExt_expected_prev[8] !== last_ImmExt_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[8] = ImmExt_expected_prev[8];
	end
	if (
		( ImmExt_expected_prev[9] !== 1'bx ) && ( ImmExt_prev[9] !== ImmExt_expected_prev[9] )
		&& ((ImmExt_expected_prev[9] !== last_ImmExt_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[9] = ImmExt_expected_prev[9];
	end
	if (
		( ImmExt_expected_prev[10] !== 1'bx ) && ( ImmExt_prev[10] !== ImmExt_expected_prev[10] )
		&& ((ImmExt_expected_prev[10] !== last_ImmExt_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[10] = ImmExt_expected_prev[10];
	end
	if (
		( ImmExt_expected_prev[11] !== 1'bx ) && ( ImmExt_prev[11] !== ImmExt_expected_prev[11] )
		&& ((ImmExt_expected_prev[11] !== last_ImmExt_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[11] = ImmExt_expected_prev[11];
	end
	if (
		( ImmExt_expected_prev[12] !== 1'bx ) && ( ImmExt_prev[12] !== ImmExt_expected_prev[12] )
		&& ((ImmExt_expected_prev[12] !== last_ImmExt_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[12] = ImmExt_expected_prev[12];
	end
	if (
		( ImmExt_expected_prev[13] !== 1'bx ) && ( ImmExt_prev[13] !== ImmExt_expected_prev[13] )
		&& ((ImmExt_expected_prev[13] !== last_ImmExt_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[13] = ImmExt_expected_prev[13];
	end
	if (
		( ImmExt_expected_prev[14] !== 1'bx ) && ( ImmExt_prev[14] !== ImmExt_expected_prev[14] )
		&& ((ImmExt_expected_prev[14] !== last_ImmExt_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[14] = ImmExt_expected_prev[14];
	end
	if (
		( ImmExt_expected_prev[15] !== 1'bx ) && ( ImmExt_prev[15] !== ImmExt_expected_prev[15] )
		&& ((ImmExt_expected_prev[15] !== last_ImmExt_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[15] = ImmExt_expected_prev[15];
	end
	if (
		( ImmExt_expected_prev[16] !== 1'bx ) && ( ImmExt_prev[16] !== ImmExt_expected_prev[16] )
		&& ((ImmExt_expected_prev[16] !== last_ImmExt_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[16] = ImmExt_expected_prev[16];
	end
	if (
		( ImmExt_expected_prev[17] !== 1'bx ) && ( ImmExt_prev[17] !== ImmExt_expected_prev[17] )
		&& ((ImmExt_expected_prev[17] !== last_ImmExt_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[17] = ImmExt_expected_prev[17];
	end
	if (
		( ImmExt_expected_prev[18] !== 1'bx ) && ( ImmExt_prev[18] !== ImmExt_expected_prev[18] )
		&& ((ImmExt_expected_prev[18] !== last_ImmExt_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[18] = ImmExt_expected_prev[18];
	end
	if (
		( ImmExt_expected_prev[19] !== 1'bx ) && ( ImmExt_prev[19] !== ImmExt_expected_prev[19] )
		&& ((ImmExt_expected_prev[19] !== last_ImmExt_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[19] = ImmExt_expected_prev[19];
	end
	if (
		( ImmExt_expected_prev[20] !== 1'bx ) && ( ImmExt_prev[20] !== ImmExt_expected_prev[20] )
		&& ((ImmExt_expected_prev[20] !== last_ImmExt_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[20] = ImmExt_expected_prev[20];
	end
	if (
		( ImmExt_expected_prev[21] !== 1'bx ) && ( ImmExt_prev[21] !== ImmExt_expected_prev[21] )
		&& ((ImmExt_expected_prev[21] !== last_ImmExt_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[21] = ImmExt_expected_prev[21];
	end
	if (
		( ImmExt_expected_prev[22] !== 1'bx ) && ( ImmExt_prev[22] !== ImmExt_expected_prev[22] )
		&& ((ImmExt_expected_prev[22] !== last_ImmExt_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[22] = ImmExt_expected_prev[22];
	end
	if (
		( ImmExt_expected_prev[23] !== 1'bx ) && ( ImmExt_prev[23] !== ImmExt_expected_prev[23] )
		&& ((ImmExt_expected_prev[23] !== last_ImmExt_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[23] = ImmExt_expected_prev[23];
	end
	if (
		( ImmExt_expected_prev[24] !== 1'bx ) && ( ImmExt_prev[24] !== ImmExt_expected_prev[24] )
		&& ((ImmExt_expected_prev[24] !== last_ImmExt_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[24] = ImmExt_expected_prev[24];
	end
	if (
		( ImmExt_expected_prev[25] !== 1'bx ) && ( ImmExt_prev[25] !== ImmExt_expected_prev[25] )
		&& ((ImmExt_expected_prev[25] !== last_ImmExt_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[25] = ImmExt_expected_prev[25];
	end
	if (
		( ImmExt_expected_prev[26] !== 1'bx ) && ( ImmExt_prev[26] !== ImmExt_expected_prev[26] )
		&& ((ImmExt_expected_prev[26] !== last_ImmExt_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[26] = ImmExt_expected_prev[26];
	end
	if (
		( ImmExt_expected_prev[27] !== 1'bx ) && ( ImmExt_prev[27] !== ImmExt_expected_prev[27] )
		&& ((ImmExt_expected_prev[27] !== last_ImmExt_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[27] = ImmExt_expected_prev[27];
	end
	if (
		( ImmExt_expected_prev[28] !== 1'bx ) && ( ImmExt_prev[28] !== ImmExt_expected_prev[28] )
		&& ((ImmExt_expected_prev[28] !== last_ImmExt_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[28] = ImmExt_expected_prev[28];
	end
	if (
		( ImmExt_expected_prev[29] !== 1'bx ) && ( ImmExt_prev[29] !== ImmExt_expected_prev[29] )
		&& ((ImmExt_expected_prev[29] !== last_ImmExt_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[29] = ImmExt_expected_prev[29];
	end
	if (
		( ImmExt_expected_prev[30] !== 1'bx ) && ( ImmExt_prev[30] !== ImmExt_expected_prev[30] )
		&& ((ImmExt_expected_prev[30] !== last_ImmExt_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[30] = ImmExt_expected_prev[30];
	end
	if (
		( ImmExt_expected_prev[31] !== 1'bx ) && ( ImmExt_prev[31] !== ImmExt_expected_prev[31] )
		&& ((ImmExt_expected_prev[31] !== last_ImmExt_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ImmExt[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ImmExt_expected_prev);
		$display ("     Real value = %b", ImmExt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ImmExt_exp[31] = ImmExt_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Imm_unit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [24:0] ImmIn;
reg [2:0] ImmSrc;
// wires                                               
wire [31:0] ImmExt;

wire sampler;                             

// assign statements (if any)                          
Imm_unit i1 (
// port map - connection between master ports and signals/registers   
	.ImmExt(ImmExt),
	.ImmIn(ImmIn),
	.ImmSrc(ImmSrc)
);
// ImmIn[ 24 ]
initial
begin
	ImmIn[24] = 1'b1;
	ImmIn[24] = #260000 1'b0;
	ImmIn[24] = #120000 1'b1;
end 
// ImmIn[ 23 ]
initial
begin
	ImmIn[23] = 1'b0;
end 
// ImmIn[ 22 ]
initial
begin
	ImmIn[22] = 1'b0;
end 
// ImmIn[ 21 ]
initial
begin
	ImmIn[21] = 1'b0;
	ImmIn[21] = #260000 1'b1;
	ImmIn[21] = #120000 1'b0;
end 
// ImmIn[ 20 ]
initial
begin
	ImmIn[20] = 1'b1;
end 
// ImmIn[ 19 ]
initial
begin
	ImmIn[19] = 1'b1;
end 
// ImmIn[ 18 ]
initial
begin
	ImmIn[18] = 1'b0;
end 
// ImmIn[ 17 ]
initial
begin
	ImmIn[17] = 1'b0;
end 
// ImmIn[ 16 ]
initial
begin
	ImmIn[16] = 1'b0;
end 
// ImmIn[ 15 ]
initial
begin
	ImmIn[15] = 1'b0;
end 
// ImmIn[ 14 ]
initial
begin
	ImmIn[14] = 1'b0;
end 
// ImmIn[ 13 ]
initial
begin
	ImmIn[13] = 1'b0;
end 
// ImmIn[ 12 ]
initial
begin
	ImmIn[12] = 1'b0;
end 
// ImmIn[ 11 ]
initial
begin
	ImmIn[11] = 1'b0;
end 
// ImmIn[ 10 ]
initial
begin
	ImmIn[10] = 1'b0;
end 
// ImmIn[ 9 ]
initial
begin
	ImmIn[9] = 1'b0;
end 
// ImmIn[ 8 ]
initial
begin
	ImmIn[8] = 1'b0;
end 
// ImmIn[ 7 ]
initial
begin
	ImmIn[7] = 1'b0;
end 
// ImmIn[ 6 ]
initial
begin
	ImmIn[6] = 1'b0;
end 
// ImmIn[ 5 ]
initial
begin
	ImmIn[5] = 1'b0;
end 
// ImmIn[ 4 ]
initial
begin
	ImmIn[4] = 1'b0;
end 
// ImmIn[ 3 ]
initial
begin
	ImmIn[3] = 1'b0;
	ImmIn[3] = #180000 1'b1;
	ImmIn[3] = #60000 1'b0;
end 
// ImmIn[ 2 ]
initial
begin
	ImmIn[2] = 1'b0;
	ImmIn[2] = #180000 1'b1;
	ImmIn[2] = #60000 1'b0;
end 
// ImmIn[ 1 ]
initial
begin
	ImmIn[1] = 1'b0;
	ImmIn[1] = #180000 1'b1;
	ImmIn[1] = #60000 1'b0;
end 
// ImmIn[ 0 ]
initial
begin
	ImmIn[0] = 1'b0;
	ImmIn[0] = #180000 1'b1;
	ImmIn[0] = #60000 1'b0;
end 
// ImmSrc[ 2 ]
initial
begin
	ImmSrc[2] = 1'b0;
	ImmSrc[2] = #120000 1'b1;
	ImmSrc[2] = #120000 1'b0;
end 
// ImmSrc[ 1 ]
initial
begin
	ImmSrc[1] = 1'b0;
end 
// ImmSrc[ 0 ]
initial
begin
	ImmSrc[0] = 1'b0;
	ImmSrc[0] = #60000 1'b1;
	ImmSrc[0] = #180000 1'b0;
end 

Imm_unit_vlg_sample_tst tb_sample (
	.ImmIn(ImmIn),
	.ImmSrc(ImmSrc),
	.sampler_tx(sampler)
);

Imm_unit_vlg_check_tst tb_out(
	.ImmExt(ImmExt),
	.sampler_rx(sampler)
);
endmodule

