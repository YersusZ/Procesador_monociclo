// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/22/2024 19:46:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Data_memory
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Data_memory_vlg_sample_tst(
	Address,
	DMCtrl,
	DMWr,
	DataWr,
	sampler_tx
);
input [31:0] Address;
input [2:0] DMCtrl;
input  DMWr;
input [31:0] DataWr;
output sampler_tx;

reg sample;
time current_time;
always @(Address or DMCtrl or DMWr or DataWr)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Data_memory_vlg_check_tst (
	DataRd,
	sampler_rx
);
input [31:0] DataRd;
input sampler_rx;

reg [31:0] DataRd_expected;

reg [31:0] DataRd_prev;

reg [31:0] DataRd_expected_prev;

reg [31:0] last_DataRd_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	DataRd_prev = DataRd;
end

// update expected /o prevs

always @(trigger)
begin
	DataRd_expected_prev = DataRd_expected;
end


// expected DataRd[ 31 ]
initial
begin
	DataRd_expected[31] = 1'bX;
end 
// expected DataRd[ 30 ]
initial
begin
	DataRd_expected[30] = 1'bX;
end 
// expected DataRd[ 29 ]
initial
begin
	DataRd_expected[29] = 1'bX;
end 
// expected DataRd[ 28 ]
initial
begin
	DataRd_expected[28] = 1'bX;
end 
// expected DataRd[ 27 ]
initial
begin
	DataRd_expected[27] = 1'bX;
end 
// expected DataRd[ 26 ]
initial
begin
	DataRd_expected[26] = 1'bX;
end 
// expected DataRd[ 25 ]
initial
begin
	DataRd_expected[25] = 1'bX;
end 
// expected DataRd[ 24 ]
initial
begin
	DataRd_expected[24] = 1'bX;
end 
// expected DataRd[ 23 ]
initial
begin
	DataRd_expected[23] = 1'bX;
end 
// expected DataRd[ 22 ]
initial
begin
	DataRd_expected[22] = 1'bX;
end 
// expected DataRd[ 21 ]
initial
begin
	DataRd_expected[21] = 1'bX;
end 
// expected DataRd[ 20 ]
initial
begin
	DataRd_expected[20] = 1'bX;
end 
// expected DataRd[ 19 ]
initial
begin
	DataRd_expected[19] = 1'bX;
end 
// expected DataRd[ 18 ]
initial
begin
	DataRd_expected[18] = 1'bX;
end 
// expected DataRd[ 17 ]
initial
begin
	DataRd_expected[17] = 1'bX;
end 
// expected DataRd[ 16 ]
initial
begin
	DataRd_expected[16] = 1'bX;
end 
// expected DataRd[ 15 ]
initial
begin
	DataRd_expected[15] = 1'bX;
end 
// expected DataRd[ 14 ]
initial
begin
	DataRd_expected[14] = 1'bX;
end 
// expected DataRd[ 13 ]
initial
begin
	DataRd_expected[13] = 1'bX;
end 
// expected DataRd[ 12 ]
initial
begin
	DataRd_expected[12] = 1'bX;
end 
// expected DataRd[ 11 ]
initial
begin
	DataRd_expected[11] = 1'bX;
end 
// expected DataRd[ 10 ]
initial
begin
	DataRd_expected[10] = 1'bX;
end 
// expected DataRd[ 9 ]
initial
begin
	DataRd_expected[9] = 1'bX;
end 
// expected DataRd[ 8 ]
initial
begin
	DataRd_expected[8] = 1'bX;
end 
// expected DataRd[ 7 ]
initial
begin
	DataRd_expected[7] = 1'bX;
end 
// expected DataRd[ 6 ]
initial
begin
	DataRd_expected[6] = 1'bX;
end 
// expected DataRd[ 5 ]
initial
begin
	DataRd_expected[5] = 1'bX;
end 
// expected DataRd[ 4 ]
initial
begin
	DataRd_expected[4] = 1'bX;
end 
// expected DataRd[ 3 ]
initial
begin
	DataRd_expected[3] = 1'bX;
end 
// expected DataRd[ 2 ]
initial
begin
	DataRd_expected[2] = 1'bX;
end 
// expected DataRd[ 1 ]
initial
begin
	DataRd_expected[1] = 1'bX;
end 
// expected DataRd[ 0 ]
initial
begin
	DataRd_expected[0] = 1'bX;
end 
// generate trigger
always @(DataRd_expected or DataRd)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DataRd = %b | ",DataRd_expected_prev);
	$display("| real DataRd = %b | ",DataRd_prev);
`endif
	if (
		( DataRd_expected_prev[0] !== 1'bx ) && ( DataRd_prev[0] !== DataRd_expected_prev[0] )
		&& ((DataRd_expected_prev[0] !== last_DataRd_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[0] = DataRd_expected_prev[0];
	end
	if (
		( DataRd_expected_prev[1] !== 1'bx ) && ( DataRd_prev[1] !== DataRd_expected_prev[1] )
		&& ((DataRd_expected_prev[1] !== last_DataRd_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[1] = DataRd_expected_prev[1];
	end
	if (
		( DataRd_expected_prev[2] !== 1'bx ) && ( DataRd_prev[2] !== DataRd_expected_prev[2] )
		&& ((DataRd_expected_prev[2] !== last_DataRd_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[2] = DataRd_expected_prev[2];
	end
	if (
		( DataRd_expected_prev[3] !== 1'bx ) && ( DataRd_prev[3] !== DataRd_expected_prev[3] )
		&& ((DataRd_expected_prev[3] !== last_DataRd_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[3] = DataRd_expected_prev[3];
	end
	if (
		( DataRd_expected_prev[4] !== 1'bx ) && ( DataRd_prev[4] !== DataRd_expected_prev[4] )
		&& ((DataRd_expected_prev[4] !== last_DataRd_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[4] = DataRd_expected_prev[4];
	end
	if (
		( DataRd_expected_prev[5] !== 1'bx ) && ( DataRd_prev[5] !== DataRd_expected_prev[5] )
		&& ((DataRd_expected_prev[5] !== last_DataRd_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[5] = DataRd_expected_prev[5];
	end
	if (
		( DataRd_expected_prev[6] !== 1'bx ) && ( DataRd_prev[6] !== DataRd_expected_prev[6] )
		&& ((DataRd_expected_prev[6] !== last_DataRd_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[6] = DataRd_expected_prev[6];
	end
	if (
		( DataRd_expected_prev[7] !== 1'bx ) && ( DataRd_prev[7] !== DataRd_expected_prev[7] )
		&& ((DataRd_expected_prev[7] !== last_DataRd_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[7] = DataRd_expected_prev[7];
	end
	if (
		( DataRd_expected_prev[8] !== 1'bx ) && ( DataRd_prev[8] !== DataRd_expected_prev[8] )
		&& ((DataRd_expected_prev[8] !== last_DataRd_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[8] = DataRd_expected_prev[8];
	end
	if (
		( DataRd_expected_prev[9] !== 1'bx ) && ( DataRd_prev[9] !== DataRd_expected_prev[9] )
		&& ((DataRd_expected_prev[9] !== last_DataRd_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[9] = DataRd_expected_prev[9];
	end
	if (
		( DataRd_expected_prev[10] !== 1'bx ) && ( DataRd_prev[10] !== DataRd_expected_prev[10] )
		&& ((DataRd_expected_prev[10] !== last_DataRd_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[10] = DataRd_expected_prev[10];
	end
	if (
		( DataRd_expected_prev[11] !== 1'bx ) && ( DataRd_prev[11] !== DataRd_expected_prev[11] )
		&& ((DataRd_expected_prev[11] !== last_DataRd_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[11] = DataRd_expected_prev[11];
	end
	if (
		( DataRd_expected_prev[12] !== 1'bx ) && ( DataRd_prev[12] !== DataRd_expected_prev[12] )
		&& ((DataRd_expected_prev[12] !== last_DataRd_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[12] = DataRd_expected_prev[12];
	end
	if (
		( DataRd_expected_prev[13] !== 1'bx ) && ( DataRd_prev[13] !== DataRd_expected_prev[13] )
		&& ((DataRd_expected_prev[13] !== last_DataRd_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[13] = DataRd_expected_prev[13];
	end
	if (
		( DataRd_expected_prev[14] !== 1'bx ) && ( DataRd_prev[14] !== DataRd_expected_prev[14] )
		&& ((DataRd_expected_prev[14] !== last_DataRd_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[14] = DataRd_expected_prev[14];
	end
	if (
		( DataRd_expected_prev[15] !== 1'bx ) && ( DataRd_prev[15] !== DataRd_expected_prev[15] )
		&& ((DataRd_expected_prev[15] !== last_DataRd_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[15] = DataRd_expected_prev[15];
	end
	if (
		( DataRd_expected_prev[16] !== 1'bx ) && ( DataRd_prev[16] !== DataRd_expected_prev[16] )
		&& ((DataRd_expected_prev[16] !== last_DataRd_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[16] = DataRd_expected_prev[16];
	end
	if (
		( DataRd_expected_prev[17] !== 1'bx ) && ( DataRd_prev[17] !== DataRd_expected_prev[17] )
		&& ((DataRd_expected_prev[17] !== last_DataRd_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[17] = DataRd_expected_prev[17];
	end
	if (
		( DataRd_expected_prev[18] !== 1'bx ) && ( DataRd_prev[18] !== DataRd_expected_prev[18] )
		&& ((DataRd_expected_prev[18] !== last_DataRd_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[18] = DataRd_expected_prev[18];
	end
	if (
		( DataRd_expected_prev[19] !== 1'bx ) && ( DataRd_prev[19] !== DataRd_expected_prev[19] )
		&& ((DataRd_expected_prev[19] !== last_DataRd_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[19] = DataRd_expected_prev[19];
	end
	if (
		( DataRd_expected_prev[20] !== 1'bx ) && ( DataRd_prev[20] !== DataRd_expected_prev[20] )
		&& ((DataRd_expected_prev[20] !== last_DataRd_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[20] = DataRd_expected_prev[20];
	end
	if (
		( DataRd_expected_prev[21] !== 1'bx ) && ( DataRd_prev[21] !== DataRd_expected_prev[21] )
		&& ((DataRd_expected_prev[21] !== last_DataRd_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[21] = DataRd_expected_prev[21];
	end
	if (
		( DataRd_expected_prev[22] !== 1'bx ) && ( DataRd_prev[22] !== DataRd_expected_prev[22] )
		&& ((DataRd_expected_prev[22] !== last_DataRd_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[22] = DataRd_expected_prev[22];
	end
	if (
		( DataRd_expected_prev[23] !== 1'bx ) && ( DataRd_prev[23] !== DataRd_expected_prev[23] )
		&& ((DataRd_expected_prev[23] !== last_DataRd_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[23] = DataRd_expected_prev[23];
	end
	if (
		( DataRd_expected_prev[24] !== 1'bx ) && ( DataRd_prev[24] !== DataRd_expected_prev[24] )
		&& ((DataRd_expected_prev[24] !== last_DataRd_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[24] = DataRd_expected_prev[24];
	end
	if (
		( DataRd_expected_prev[25] !== 1'bx ) && ( DataRd_prev[25] !== DataRd_expected_prev[25] )
		&& ((DataRd_expected_prev[25] !== last_DataRd_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[25] = DataRd_expected_prev[25];
	end
	if (
		( DataRd_expected_prev[26] !== 1'bx ) && ( DataRd_prev[26] !== DataRd_expected_prev[26] )
		&& ((DataRd_expected_prev[26] !== last_DataRd_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[26] = DataRd_expected_prev[26];
	end
	if (
		( DataRd_expected_prev[27] !== 1'bx ) && ( DataRd_prev[27] !== DataRd_expected_prev[27] )
		&& ((DataRd_expected_prev[27] !== last_DataRd_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[27] = DataRd_expected_prev[27];
	end
	if (
		( DataRd_expected_prev[28] !== 1'bx ) && ( DataRd_prev[28] !== DataRd_expected_prev[28] )
		&& ((DataRd_expected_prev[28] !== last_DataRd_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[28] = DataRd_expected_prev[28];
	end
	if (
		( DataRd_expected_prev[29] !== 1'bx ) && ( DataRd_prev[29] !== DataRd_expected_prev[29] )
		&& ((DataRd_expected_prev[29] !== last_DataRd_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[29] = DataRd_expected_prev[29];
	end
	if (
		( DataRd_expected_prev[30] !== 1'bx ) && ( DataRd_prev[30] !== DataRd_expected_prev[30] )
		&& ((DataRd_expected_prev[30] !== last_DataRd_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[30] = DataRd_expected_prev[30];
	end
	if (
		( DataRd_expected_prev[31] !== 1'bx ) && ( DataRd_prev[31] !== DataRd_expected_prev[31] )
		&& ((DataRd_expected_prev[31] !== last_DataRd_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataRd[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataRd_expected_prev);
		$display ("     Real value = %b", DataRd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataRd_exp[31] = DataRd_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Data_memory_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] Address;
reg [2:0] DMCtrl;
reg DMWr;
reg [31:0] DataWr;
// wires                                               
wire [31:0] DataRd;

wire sampler;                             

// assign statements (if any)                          
Data_memory i1 (
// port map - connection between master ports and signals/registers   
	.Address(Address),
	.DMCtrl(DMCtrl),
	.DMWr(DMWr),
	.DataRd(DataRd),
	.DataWr(DataWr)
);
// Address[ 31 ]
initial
begin
	Address[31] = 1'b0;
end 
// Address[ 30 ]
initial
begin
	Address[30] = 1'b0;
end 
// Address[ 29 ]
initial
begin
	Address[29] = 1'b0;
end 
// Address[ 28 ]
initial
begin
	Address[28] = 1'b0;
end 
// Address[ 27 ]
initial
begin
	Address[27] = 1'b0;
end 
// Address[ 26 ]
initial
begin
	Address[26] = 1'b0;
end 
// Address[ 25 ]
initial
begin
	Address[25] = 1'b0;
end 
// Address[ 24 ]
initial
begin
	Address[24] = 1'b0;
end 
// Address[ 23 ]
initial
begin
	Address[23] = 1'b0;
end 
// Address[ 22 ]
initial
begin
	Address[22] = 1'b0;
end 
// Address[ 21 ]
initial
begin
	Address[21] = 1'b0;
end 
// Address[ 20 ]
initial
begin
	Address[20] = 1'b0;
end 
// Address[ 19 ]
initial
begin
	Address[19] = 1'b0;
end 
// Address[ 18 ]
initial
begin
	Address[18] = 1'b0;
end 
// Address[ 17 ]
initial
begin
	Address[17] = 1'b0;
end 
// Address[ 16 ]
initial
begin
	Address[16] = 1'b0;
end 
// Address[ 15 ]
initial
begin
	Address[15] = 1'b0;
end 
// Address[ 14 ]
initial
begin
	Address[14] = 1'b0;
end 
// Address[ 13 ]
initial
begin
	Address[13] = 1'b0;
end 
// Address[ 12 ]
initial
begin
	Address[12] = 1'b0;
end 
// Address[ 11 ]
initial
begin
	Address[11] = 1'b0;
end 
// Address[ 10 ]
initial
begin
	Address[10] = 1'b0;
end 
// Address[ 9 ]
initial
begin
	Address[9] = 1'b0;
end 
// Address[ 8 ]
initial
begin
	Address[8] = 1'b0;
end 
// Address[ 7 ]
initial
begin
	Address[7] = 1'b0;
end 
// Address[ 6 ]
initial
begin
	Address[6] = 1'b0;
end 
// Address[ 5 ]
initial
begin
	Address[5] = 1'b0;
end 
// Address[ 4 ]
initial
begin
	Address[4] = 1'b0;
end 
// Address[ 3 ]
initial
begin
	Address[3] = 1'b0;
	Address[3] = #120000 1'b1;
	Address[3] = #80000 1'b0;
	Address[3] = #160000 1'b1;
	Address[3] = #200000 1'b0;
end 
// Address[ 2 ]
initial
begin
	Address[2] = 1'b0;
	Address[2] = #60000 1'b1;
	Address[2] = #60000 1'b0;
	Address[2] = #160000 1'b1;
	Address[2] = #80000 1'b0;
end 
// Address[ 1 ]
initial
begin
	Address[1] = 1'b0;
end 
// Address[ 0 ]
initial
begin
	Address[0] = 1'b0;
end 
// DMCtrl[ 2 ]
initial
begin
	DMCtrl[2] = 1'b0;
	DMCtrl[2] = #560000 1'b1;
	DMCtrl[2] = #120000 1'b0;
end 
// DMCtrl[ 1 ]
initial
begin
	DMCtrl[1] = 1'b0;
	DMCtrl[1] = #120000 1'b1;
	DMCtrl[1] = #80000 1'b0;
	DMCtrl[1] = #160000 1'b1;
	DMCtrl[1] = #80000 1'b0;
end 
// DMCtrl[ 0 ]
initial
begin
	DMCtrl[0] = 1'b0;
	DMCtrl[0] = #60000 1'b1;
	DMCtrl[0] = #60000 1'b0;
	DMCtrl[0] = #160000 1'b1;
	DMCtrl[0] = #80000 1'b0;
	DMCtrl[0] = #140000 1'b1;
	DMCtrl[0] = #60000 1'b0;
	DMCtrl[0] = #60000 1'b1;
	DMCtrl[0] = #60000 1'b0;
end 

// DMWr
initial
begin
	DMWr = 1'b1;
	# 10000;
	repeat(9)
	begin
		DMWr = 1'b0;
		DMWr = #10000 1'b1;
		# 10000;
	end
	DMWr = 1'b0;
end 
// DataWr[ 31 ]
initial
begin
	DataWr[31] = 1'b0;
	DataWr[31] = #120000 1'b1;
	DataWr[31] = #80000 1'b0;
end 
// DataWr[ 30 ]
initial
begin
	DataWr[30] = 1'b0;
	DataWr[30] = #120000 1'b1;
	DataWr[30] = #80000 1'b0;
end 
// DataWr[ 29 ]
initial
begin
	DataWr[29] = 1'b0;
	DataWr[29] = #120000 1'b1;
	DataWr[29] = #80000 1'b0;
end 
// DataWr[ 28 ]
initial
begin
	DataWr[28] = 1'b0;
	DataWr[28] = #120000 1'b1;
	DataWr[28] = #80000 1'b0;
end 
// DataWr[ 27 ]
initial
begin
	DataWr[27] = 1'b0;
	DataWr[27] = #120000 1'b1;
	DataWr[27] = #80000 1'b0;
end 
// DataWr[ 26 ]
initial
begin
	DataWr[26] = 1'b0;
	DataWr[26] = #60000 1'b1;
	DataWr[26] = #140000 1'b0;
end 
// DataWr[ 25 ]
initial
begin
	DataWr[25] = 1'b0;
	DataWr[25] = #60000 1'b1;
	DataWr[25] = #140000 1'b0;
end 
// DataWr[ 24 ]
initial
begin
	DataWr[24] = 1'b0;
	DataWr[24] = #60000 1'b1;
	DataWr[24] = #140000 1'b0;
end 
// DataWr[ 23 ]
initial
begin
	DataWr[23] = 1'b0;
	DataWr[23] = #60000 1'b1;
	DataWr[23] = #140000 1'b0;
end 
// DataWr[ 22 ]
initial
begin
	DataWr[22] = 1'b0;
	DataWr[22] = #60000 1'b1;
	DataWr[22] = #140000 1'b0;
end 
// DataWr[ 21 ]
initial
begin
	DataWr[21] = 1'b0;
	DataWr[21] = #60000 1'b1;
	DataWr[21] = #140000 1'b0;
end 
// DataWr[ 20 ]
initial
begin
	DataWr[20] = 1'b0;
	DataWr[20] = #60000 1'b1;
	DataWr[20] = #140000 1'b0;
end 
// DataWr[ 19 ]
initial
begin
	DataWr[19] = 1'b0;
	DataWr[19] = #60000 1'b1;
	DataWr[19] = #140000 1'b0;
end 
// DataWr[ 18 ]
initial
begin
	DataWr[18] = 1'b0;
	DataWr[18] = #60000 1'b1;
	DataWr[18] = #140000 1'b0;
end 
// DataWr[ 17 ]
initial
begin
	DataWr[17] = 1'b0;
	DataWr[17] = #60000 1'b1;
	DataWr[17] = #140000 1'b0;
end 
// DataWr[ 16 ]
initial
begin
	DataWr[16] = 1'b0;
	DataWr[16] = #60000 1'b1;
	DataWr[16] = #140000 1'b0;
end 
// DataWr[ 15 ]
initial
begin
	DataWr[15] = 1'b0;
	DataWr[15] = #60000 1'b1;
	DataWr[15] = #140000 1'b0;
end 
// DataWr[ 14 ]
initial
begin
	DataWr[14] = 1'b0;
	DataWr[14] = #60000 1'b1;
	DataWr[14] = #140000 1'b0;
end 
// DataWr[ 13 ]
initial
begin
	DataWr[13] = 1'b0;
	DataWr[13] = #60000 1'b1;
	DataWr[13] = #140000 1'b0;
end 
// DataWr[ 12 ]
initial
begin
	DataWr[12] = 1'b0;
	DataWr[12] = #60000 1'b1;
	DataWr[12] = #140000 1'b0;
end 
// DataWr[ 11 ]
initial
begin
	DataWr[11] = 1'b0;
	DataWr[11] = #60000 1'b1;
	DataWr[11] = #140000 1'b0;
end 
// DataWr[ 10 ]
initial
begin
	DataWr[10] = 1'b0;
	DataWr[10] = #60000 1'b1;
	DataWr[10] = #140000 1'b0;
end 
// DataWr[ 9 ]
initial
begin
	DataWr[9] = 1'b1;
	DataWr[9] = #200000 1'b0;
end 
// DataWr[ 8 ]
initial
begin
	DataWr[8] = 1'b1;
	DataWr[8] = #200000 1'b0;
end 
// DataWr[ 7 ]
initial
begin
	DataWr[7] = 1'b1;
	DataWr[7] = #200000 1'b0;
end 
// DataWr[ 6 ]
initial
begin
	DataWr[6] = 1'b1;
	DataWr[6] = #200000 1'b0;
end 
// DataWr[ 5 ]
initial
begin
	DataWr[5] = 1'b1;
	DataWr[5] = #200000 1'b0;
end 
// DataWr[ 4 ]
initial
begin
	DataWr[4] = 1'b1;
	DataWr[4] = #200000 1'b0;
end 
// DataWr[ 3 ]
initial
begin
	DataWr[3] = 1'b1;
	DataWr[3] = #200000 1'b0;
end 
// DataWr[ 2 ]
initial
begin
	DataWr[2] = 1'b1;
	DataWr[2] = #200000 1'b0;
end 
// DataWr[ 1 ]
initial
begin
	DataWr[1] = 1'b1;
	DataWr[1] = #200000 1'b0;
end 
// DataWr[ 0 ]
initial
begin
	DataWr[0] = 1'b1;
	DataWr[0] = #200000 1'b0;
end 

Data_memory_vlg_sample_tst tb_sample (
	.Address(Address),
	.DMCtrl(DMCtrl),
	.DMWr(DMWr),
	.DataWr(DataWr),
	.sampler_tx(sampler)
);

Data_memory_vlg_check_tst tb_out(
	.DataRd(DataRd),
	.sampler_rx(sampler)
);
endmodule

